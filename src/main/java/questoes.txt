Questão 1: Implementação Básica de LinkedList
Crie uma classe LinkedList em Java que permita a inserção e remoção de 
elementos no início e no final da lista. Implemente também um método 
para imprimir todos os elementos da lista.

Questão 2: Inserção em Posição Específica
Escreva um método insertAtPosition na classe LinkedList que insere um 
elemento em uma posição específica da lista. Se a posição for maior que 
o tamanho da lista, o elemento deve ser inserido no final.

Questão 3: Remoção de um Elemento por Valor
Implemente um método removeByValue na classe LinkedList que remove a 
primeira ocorrência de um valor específico na lista. Se o valor não 
for encontrado, a lista deve permanecer inalterada.

Questão 4: Tamanho da LinkedList
Crie um método size na classe LinkedList que retorna o número de elementos 
presentes na lista. Não use atributos adicionais para armazenar o tamanho; 
percorra a lista para contar os elementos.

Questão 5: Verificação de Existência de um Elemento
Implemente um método contains na classe LinkedList que retorna true se um 
valor específico estiver presente na lista e false caso contrário.

Questão 6: Inversão da LinkedList
Escreva um método reverse na classe LinkedList que inverte a ordem dos 
elementos da lista. A inversão deve ser feita sem criar uma nova lista, 
apenas manipulando os nós existentes.

Questão 7: União de Duas LinkedLists
Crie um método union na classe LinkedList que recebe outra LinkedList como 
parâmetro e retorna uma nova lista contendo a união dos elementos das duas 
listas, sem duplicatas.

Questão 8: Interseção de Duas LinkedLists
Implemente um método intersection na classe LinkedList que recebe outra 
LinkedList como parâmetro e retorna uma nova lista contendo apenas os 
elementos comuns às duas listas.

Questão 9: Ordenação de uma LinkedList
Escreva um método sort na classe LinkedList que ordena os elementos da lista 
em ordem crescente. Use o algoritmo de ordenação de sua preferência 
(ex: Bubble Sort, Merge Sort, etc.).

Questão 10: Remoção de Duplicatas
Implemente um método removeDuplicates na classe LinkedList que remove todas as 
ocorrências duplicadas de elementos na lista, mantendo apenas a primeira 
ocorrência de cada valor.

Questão Extra 2: Inserir e Remover em Posição Específica
Crie dois métodos na classe LinkedList:

insertAtPosition(int position, int value): Insere um valor em uma posição específica da lista.
removeAtPosition(int position): Remove o elemento em uma posição específica da lista.
Se a posição for inválida (menor que 0 ou maior que o tamanho da lista), lance uma exceção ou trate o erro de forma adequada.

Questão Extra 3: Estatística de Ordem (k-ésimo Menor Elemento)
Implemente um método kthSmallest(int k) na classe LinkedList que retorna o 
k-ésimo menor elemento da lista. Por exemplo, se k = 1, retorne o menor elemento; 
se k = 2, retorne o segundo menor, e assim por diante. Se k for maior que o tamanho 
da lista, lance uma exceção ou retorne um valor específico.

Questão Extra 4: Média dos Elementos
Escreva um método calculateAverage na classe LinkedList que calcula e retorna a 
média dos valores dos elementos da lista. Se a lista estiver vazia, retorne 0 ou lance uma exceção.

Questão Extra 5: Mediana da LinkedList
Implemente um método findMedian na classe LinkedList que retorna a mediana dos valores da 
lista. A mediana é o valor do meio em uma lista ordenada. Se a lista tiver um número par de 
elementos, retorne a média dos dois valores centrais.

Questão Extra 6: Verificar se a LinkedList é Palíndromo
Escreva um método isPalindrome na classe LinkedList que verifica se a lista é um palíndromo, 
ou seja, se a sequência de elementos é a mesma quando lida da esquerda para a direita e vice-versa. 
Retorne true se for um palíndromo e false caso contrário.

Questão Extra 7: Rotacionar a LinkedList
Implemente um método rotate(int k) na classe LinkedList que rotaciona a lista em k posições para a 
direita. Por exemplo, se a lista for [1, 2, 3, 4, 5] e k = 2, a lista resultante deve ser [4, 5, 1, 2, 3].

Questão Extra 8: Dividir a LinkedList em Duas
Crie um método splitList(int position) na classe LinkedList que divide a lista em duas a partir 
de uma posição específica. O método deve retornar um array de duas listas: a primeira contendo os 
elementos até a posição position, e a segunda contendo os elementos restantes.

Questão Extra 9: Concatenar Duas LinkedLists
Implemente um método concatenate(LinkedList list) na classe LinkedList que concatena a lista atual 
com outra lista passada como parâmetro. A lista atual deve ser modificada para conter todos os elementos das duas listas.

Questão Extra 10: Enésimo Nó a Partir do Fim
Escreva um método nthFromEnd(int n) na classe LinkedList que retorna o valor do n-ésimo nó a partir 
do final da lista. Por exemplo, se n = 1, retorne o último elemento; se n = 2, retorne o penúltimo, 
e assim por diante. Se n for maior que o tamanho da lista, lance uma exceção ou retorne um valor específico.